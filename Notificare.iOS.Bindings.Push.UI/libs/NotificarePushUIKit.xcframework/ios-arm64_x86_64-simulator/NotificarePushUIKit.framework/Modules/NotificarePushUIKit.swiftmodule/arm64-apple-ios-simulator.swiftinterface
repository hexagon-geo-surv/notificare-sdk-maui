// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NotificarePushUIKit
import AVFoundation
import CoreGraphics
import CoreMedia
import Foundation
import MapKit
import MessageUI
import MobileCoreServices
import NotificareKit
@_exported import NotificarePushUIKit
import NotificareUtilitiesKit
import SafariServices
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareAppActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareAppActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case unsupportedUrlScheme
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareAppActionHandler.ActionError, b: NotificarePushUIKit.NotificareAppActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareCustomActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareCustomActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareCustomActionHandler.ActionError, b: NotificarePushUIKit.NotificareCustomActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareBaseNotificationViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var theme: NotificareKit.NotificareOptions.Theme? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareImageGalleryViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareImageGalleryViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in _: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, numberOfItemsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout _: UIKit.UICollectionViewLayout, sizeForItemAt _: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareMapViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareMapViewController : MapKit.MKMapViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, viewFor annotation: any MapKit.MKAnnotation) -> MapKit.MKAnnotationView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, annotationView view: MapKit.MKAnnotationView, calloutAccessoryControlTapped _: UIKit.UIControl)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareTelephoneActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareTelephoneActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError, b: NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension NotificareKit.NotificareNotification {
  public var requiresViewController: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NotificareImageGalleryCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol NotificarePushUI : AnyObject {
  var delegate: (any NotificarePushUIKit.NotificarePushUIDelegate)? { get set }
  func presentNotification(_ notification: NotificareKit.NotificareNotification, in controller: UIKit.UIViewController)
  func presentAction(_ action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification, in controller: UIKit.UIViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareWebPassViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareWebPassViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFailProvisionalNavigation _: WebKit.WKNavigation!, withError _: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
}
@objc @_hasMissingDesignatedInitializers public class NotificareBaseActionHandler : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareVideoViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareVideoViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: any Swift.Error)
}
public protocol NotificarePushUIDelegate : AnyObject {
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, willPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didFinishPresentingNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didFailToPresentNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didClickURL url: Foundation.URL, in notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, willExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didNotExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didFailToExecuteAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification, error: (any Swift.Error)?)
  func notificare(_ notificarePushUI: any NotificarePushUIKit.NotificarePushUI, didReceiveCustomAction url: Foundation.URL, in action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
}
extension NotificarePushUIKit.NotificarePushUIDelegate {
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, willPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didFinishPresentingNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didFailToPresentNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didClickURL _: Foundation.URL, in _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, willExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didNotExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didFailToExecuteAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification, error _: (any Swift.Error)?)
  public func notificare(_: any NotificarePushUIKit.NotificarePushUI, didReceiveCustomAction _: Foundation.URL, in _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareUrlViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareUrlViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension NotificarePushUIKit.NotificareUrlViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFailProvisionalNavigation _: WebKit.WKNavigation!, withError _: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NotificareWebViewController : NotificarePushUIKit.NotificareBaseNotificationViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NotificarePushUIKit.NotificareWebViewController : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFail _: WebKit.WKNavigation!, withError _: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame _: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers public class NotificareInAppBrowserActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareInAppBrowserActionHandler : SafariServices.SFSafariViewControllerDelegate {
  @objc dynamic public func safariViewController(_: SafariServices.SFSafariViewController, didCompleteInitialLoad successfully: Swift.Bool)
}
extension NotificarePushUIKit.NotificareInAppBrowserActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareInAppBrowserActionHandler.ActionError, b: NotificarePushUIKit.NotificareInAppBrowserActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers public class NotificareCallbackActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareCallbackActionHandler : UIKit.UIImagePickerControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_: UIKit.UIImagePickerController)
}
extension NotificarePushUIKit.NotificareCallbackActionHandler : UIKit.UINavigationControllerDelegate {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificareBrowserActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareBrowserActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case invalidUrl
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareBrowserActionHandler.ActionError, b: NotificarePushUIKit.NotificareBrowserActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension NotificareKit.Notificare {
  public func pushUI() -> any NotificarePushUIKit.NotificarePushUI
}
@objc @_hasMissingDesignatedInitializers public class NotificareSmsActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareSmsActionHandler : MessageUI.MFMessageComposeViewControllerDelegate {
  @objc dynamic public func messageComposeViewController(_: MessageUI.MFMessageComposeViewController, didFinishWith result: MessageUI.MessageComposeResult)
}
extension NotificarePushUIKit.NotificareSmsActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    case failed
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareSmsActionHandler.ActionError, b: NotificarePushUIKit.NotificareSmsActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_hasMissingDesignatedInitializers public class NotificareMailActionHandler : NotificarePushUIKit.NotificareBaseActionHandler {
  @objc deinit
}
extension NotificarePushUIKit.NotificareMailActionHandler : MessageUI.MFMailComposeViewControllerDelegate {
  @objc dynamic public func mailComposeController(_: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
}
extension NotificarePushUIKit.NotificareMailActionHandler {
  public enum ActionError : Foundation.LocalizedError {
    case notSupported
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: NotificarePushUIKit.NotificareMailActionHandler.ActionError, b: NotificarePushUIKit.NotificareMailActionHandler.ActionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension NotificarePushUIKit.NotificareAppActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareAppActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareCustomActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareCustomActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareTelephoneActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareInAppBrowserActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareInAppBrowserActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareBrowserActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareBrowserActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareSmsActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareSmsActionHandler.ActionError : Swift.Hashable {}
extension NotificarePushUIKit.NotificareMailActionHandler.ActionError : Swift.Equatable {}
extension NotificarePushUIKit.NotificareMailActionHandler.ActionError : Swift.Hashable {}
