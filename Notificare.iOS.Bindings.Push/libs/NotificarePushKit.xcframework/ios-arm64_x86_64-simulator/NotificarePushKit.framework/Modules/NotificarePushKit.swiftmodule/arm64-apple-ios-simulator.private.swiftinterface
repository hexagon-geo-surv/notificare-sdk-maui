// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NotificarePushKit
import Foundation
import MobileCoreServices
import NotificareKit
@_exported import NotificarePushKit
import NotificareUtilitiesKit
import NotificationCenter
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NotificarePush : AnyObject, NotificarePushKit.NotificarePushUIApplicationDelegate, NotificarePushKit.NotificarePushUNUserNotificationCenterDelegate {
  var delegate: (any NotificarePushKit.NotificarePushDelegate)? { get set }
  var authorizationOptions: UserNotifications.UNAuthorizationOptions { get set }
  var categoryOptions: UserNotifications.UNNotificationCategoryOptions { get set }
  var presentationOptions: UserNotifications.UNNotificationPresentationOptions { get set }
  var hasRemoteNotificationsEnabled: Swift.Bool { get }
  var transport: NotificarePushKit.NotificareTransport? { get }
  var subscription: NotificarePushKit.NotificarePushSubscription? { get }
  var allowedUI: Swift.Bool { get }
  func enableRemoteNotifications(_ completion: @escaping NotificareKit.NotificareCallback<Swift.Bool>)
  #if compiler(>=5.3) && $AsyncAwait
  func enableRemoteNotifications() async throws -> Swift.Bool
  #endif
  func disableRemoteNotifications(_ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  #if compiler(>=5.3) && $AsyncAwait
  func disableRemoteNotifications() async throws
  #endif
  func isNotificareNotification(_ userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @available(iOS 16.1, *)
  func registerLiveActivity(_ activityId: Swift.String, token: Swift.String, topics: [Swift.String], _ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 16.1, *)
  func registerLiveActivity(_ activityId: Swift.String, token: Swift.String, topics: [Swift.String]) async throws
  #endif
  @available(iOS 16.1, *)
  func endLiveActivity(_ activityId: Swift.String, _ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 16.1, *)
  func endLiveActivity(_ activityId: Swift.String) async throws
  #endif
}
extension NotificarePushKit.NotificarePush {
  @available(iOS 16.1, *)
  public func registerLiveActivity(_ activityId: Swift.String, token: Swift.String, _ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 16.1, *)
  public func registerLiveActivity(_ activityId: Swift.String, token: Swift.String) async throws
  #endif
  @available(iOS 16.1, *)
  public func registerLiveActivity(_ activityId: Swift.String, token: Foundation.Data, topics: [Swift.String] = [], _ completion: @escaping NotificareKit.NotificareCallback<Swift.Void>)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 16.1, *)
  public func registerLiveActivity(_ activityId: Swift.String, token: Foundation.Data, topics: [Swift.String] = []) async throws
  #endif
}
public protocol NotificarePushUIApplicationDelegate {
  func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken token: Foundation.Data)
  func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: any Swift.Error)
  func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any]) async -> UIKit.UIBackgroundFetchResult
  #endif
}
public protocol NotificarePushUNUserNotificationCenterDelegate {
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, openSettingsFor notification: UserNotifications.UNNotification?)
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse) async
  #endif
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification) async -> UserNotifications.UNNotificationPresentationOptions
  #endif
}
public struct NotificareSystemNotification : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let type: Swift.String
  @NotificareUtilitiesKit.NotificareExtraEquatable public var extra: [Swift.String : Any] {
    get
  }
  public init(id: Swift.String, type: Swift.String, extra: [Swift.String : Any])
  public static func == (a: NotificarePushKit.NotificareSystemNotification, b: NotificarePushKit.NotificareSystemNotification) -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension NotificarePushKit.NotificareSystemNotification : Swift.Identifiable {
  public typealias ID = Swift.String
}
extension NotificarePushKit.NotificareSystemNotification {
  public func toJson() throws -> [Swift.String : Any]
  public static func fromJson(json: [Swift.String : Any]) throws -> NotificarePushKit.NotificareSystemNotification
}
extension NotificarePushKit.NotificareSystemNotification {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum NotificareTransport : Swift.String, Swift.Codable {
  case notificare
  case apns
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NotificarePushDelegate : AnyObject {
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didFailToRegisterForRemoteNotificationsWithError error: any Swift.Error)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didChangeSubscription subscription: NotificarePushKit.NotificarePushSubscription?)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didChangeNotificationSettings allowedUI: Swift.Bool)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didReceiveUnknownNotification userInfo: [Swift.AnyHashable : Any])
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didReceiveNotification notification: NotificareKit.NotificareNotification, deliveryMechanism: NotificarePushKit.NotificareNotificationDeliveryMechanism)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didReceiveSystemNotification notification: NotificarePushKit.NotificareSystemNotification)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, shouldOpenSettings notification: NotificareKit.NotificareNotification?)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didOpenNotification notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didOpenUnknownNotification userInfo: [Swift.AnyHashable : Any])
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didOpenAction action: NotificareKit.NotificareNotification.Action, for notification: NotificareKit.NotificareNotification)
  func notificare(_ notificarePush: any NotificarePushKit.NotificarePush, didOpenUnknownAction action: Swift.String, for notification: [Swift.AnyHashable : Any], responseText: Swift.String?)
}
extension NotificarePushKit.NotificarePushDelegate {
  public func notificare(_: any NotificarePushKit.NotificarePush, didFailToRegisterForRemoteNotificationsWithError _: any Swift.Error)
  public func notificare(_: any NotificarePushKit.NotificarePush, didChangeSubscription _: NotificarePushKit.NotificarePushSubscription?)
  public func notificare(_: any NotificarePushKit.NotificarePush, didChangeNotificationSettings _: Swift.Bool)
  public func notificare(_: any NotificarePushKit.NotificarePush, didReceiveUnknownNotification _: [Swift.AnyHashable : Any])
  public func notificare(_: any NotificarePushKit.NotificarePush, didReceiveNotification _: NotificareKit.NotificareNotification, deliveryMechanism _: NotificarePushKit.NotificareNotificationDeliveryMechanism)
  public func notificare(_: any NotificarePushKit.NotificarePush, didReceiveSystemNotification _: NotificarePushKit.NotificareSystemNotification)
  public func notificare(_: any NotificarePushKit.NotificarePush, shouldOpenSettings _: NotificareKit.NotificareNotification?)
  public func notificare(_: any NotificarePushKit.NotificarePush, didOpenNotification _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushKit.NotificarePush, didOpenUnknownNotification _: [Swift.AnyHashable : Any])
  public func notificare(_: any NotificarePushKit.NotificarePush, didOpenAction _: NotificareKit.NotificareNotification.Action, for _: NotificareKit.NotificareNotification)
  public func notificare(_: any NotificarePushKit.NotificarePush, didOpenUnknownAction _: Swift.String, for _: [Swift.AnyHashable : Any], responseText _: Swift.String?)
}
extension NotificareKit.Notificare {
  public func push() -> any NotificarePushKit.NotificarePush
}
public enum NotificareNotificationDeliveryMechanism : Swift.String, Swift.Codable {
  case standard
  case silent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NotificarePushSubscription : Swift.Codable {
  public let token: Swift.String
  public init(token: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NotificarePushKit.NotificarePushSubscription {
  public func toJson() throws -> [Swift.String : Any]
  public static func fromJson(json: [Swift.String : Any]) throws -> NotificarePushKit.NotificarePushSubscription
}
extension NotificareKit.NotificareEventsModule {
  #if compiler(>=5.3) && $AsyncAwait
  public func logNotificationReceived(_ id: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func logNotificationInfluenced(_ id: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func logPushRegistration() async throws
  #endif
}
extension NotificarePushKit.NotificareTransport : Swift.Equatable {}
extension NotificarePushKit.NotificareTransport : Swift.Hashable {}
extension NotificarePushKit.NotificareTransport : Swift.RawRepresentable {}
extension NotificarePushKit.NotificareNotificationDeliveryMechanism : Swift.Equatable {}
extension NotificarePushKit.NotificareNotificationDeliveryMechanism : Swift.Hashable {}
extension NotificarePushKit.NotificareNotificationDeliveryMechanism : Swift.RawRepresentable {}
