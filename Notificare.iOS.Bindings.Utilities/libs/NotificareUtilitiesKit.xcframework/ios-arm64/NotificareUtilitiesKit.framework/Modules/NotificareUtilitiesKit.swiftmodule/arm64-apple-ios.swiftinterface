// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NotificareUtilitiesKit
import Foundation
@_exported import NotificareUtilitiesKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
extension Foundation.Bundle {
  public func getSupportedUrlSchemes() -> [Swift.String]
}
extension Foundation.JSONDecoder {
  public static var notificare: Foundation.JSONDecoder {
    get
  }
}
extension Foundation.JSONEncoder {
  public static var notificare: Foundation.JSONEncoder {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  public func toHexString() -> Swift.String
}
extension Foundation.Bundle {
  public var applicationName: Swift.String {
    get
  }
  public var applicationVersion: Swift.String {
    get
  }
}
@frozen public struct NotificareAnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _NotificareAnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : NotificareUtilitiesKit._NotificareAnyEncodable {
}
extension NotificareUtilitiesKit._NotificareAnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.Equatable {
  public static func == (lhs: NotificareUtilitiesKit.NotificareAnyEncodable, rhs: NotificareUtilitiesKit.NotificareAnyEncodable) -> Swift.Bool
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension NotificareUtilitiesKit.NotificareAnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension NotificareUtilitiesKit._NotificareAnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public func userAgent(bundle: Foundation.Bundle = Bundle.main, sdkVersion: Swift.String) -> Swift.String
}
@propertyWrapper public struct NotificareExtraEquatable<T> : Swift.Equatable {
  public var wrappedValue: T
  public init(wrappedValue: T)
  public static func == (lhs: NotificareUtilitiesKit.NotificareExtraEquatable<T>, rhs: NotificareUtilitiesKit.NotificareExtraEquatable<T>) -> Swift.Bool
}
public struct NotificareLogger {
  public init(subsystem: Swift.String = "re.notifica", category: Swift.String = "Notificare")
  public var hasDebugLoggingEnabled: Swift.Bool
  public var labelIgnoreList: [Swift.String]
  public func debug(_ message: Swift.String, error: (any Swift.Error)? = nil, file: Swift.String = #file)
  public func info(_ message: Swift.String, error: (any Swift.Error)? = nil, file: Swift.String = #file)
  public func warning(_ message: Swift.String, error: (any Swift.Error)? = nil, file: Swift.String = #file)
  public func error(_ message: Swift.String, error: (any Swift.Error)? = nil, file: Swift.String = #file)
}
extension Swift.String {
  public func toRegex() -> Foundation.NSRegularExpression
}
extension Swift.String {
  public func matches(_ regex: Foundation.NSRegularExpression) -> Swift.Bool
}
extension Swift.String {
  public func removingSuffix(_ suffix: Swift.String) -> Swift.String
}
extension Foundation.Locale {
  public func deviceLanguage(preferredLanguages: [Swift.String] = NSLocale.preferredLanguages) -> Swift.String
  public func deviceRegion(preferredLanguages: [Swift.String] = NSLocale.preferredLanguages) -> Swift.String
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var rootViewController: UIKit.UIViewController? {
    get
  }
}
extension Foundation.TimeZone {
  public var timeZoneOffset: Swift.Float {
    get
  }
}
extension Foundation.Date {
  public init?(isoDateString: Swift.String)
  public static let isoDateParser: Foundation.DateFormatter
  public static let isoDateFormatter: Foundation.DateFormatter
  public func toIsoString() -> Swift.String
}
@frozen public struct NotificareAnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension NotificareUtilitiesKit.NotificareAnyCodable : NotificareUtilitiesKit._NotificareAnyEncodable, NotificareUtilitiesKit._NotificareAnyDecodable {
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.Equatable {
  public static func == (lhs: NotificareUtilitiesKit.NotificareAnyCodable, rhs: NotificareUtilitiesKit.NotificareAnyCodable) -> Swift.Bool
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByNilLiteral {
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension NotificareUtilitiesKit.NotificareAnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension Foundation.Data {
  public func toHexString() -> Swift.String
}
@frozen public struct NotificareAnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _NotificareAnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension NotificareUtilitiesKit.NotificareAnyDecodable : NotificareUtilitiesKit._NotificareAnyDecodable {
}
extension NotificareUtilitiesKit._NotificareAnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension NotificareUtilitiesKit.NotificareAnyDecodable : Swift.Equatable {
  public static func == (lhs: NotificareUtilitiesKit.NotificareAnyDecodable, rhs: NotificareUtilitiesKit.NotificareAnyDecodable) -> Swift.Bool
}
extension NotificareUtilitiesKit.NotificareAnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NotificareUtilitiesKit.NotificareAnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@propertyWrapper public struct EncodeNull<T> : Swift.Encodable where T : Swift.Encodable {
  public let wrappedValue: T?
  public init(wrappedValue: T?)
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var deviceString: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var osVersion: Swift.String {
    get
  }
}
extension Swift.Dictionary {
  public func mapKeys<Transformed>(_ transform: (Key) throws -> Transformed) rethrows -> [Transformed : Value] where Transformed : Swift.Hashable
}
extension Foundation.URL {
  public func appendingQueryComponent(name: Swift.String, value: Swift.String) -> Foundation.URL
  public mutating func appendQueryComponent(name: Swift.String, value: Swift.String)
  public func removingQueryComponent(name: Swift.String) -> Foundation.URL
  public mutating func removeQueryComponent(name: Swift.String)
}
